<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Map on QWDing blog</title>
    <link>http://qwding.github.io/categories/map/</link>
    <description>Recent content in Map on QWDing blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Jun 2016 14:28:44 +0800</lastBuildDate>
    
	<atom:link href="http://qwding.github.io/categories/map/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go map,slice,array 遍历性能测试 </title>
      <link>http://qwding.github.io/post/gotest_map_array_slice/</link>
      <pubDate>Mon, 27 Jun 2016 14:28:44 +0800</pubDate>
      
      <guid>http://qwding.github.io/post/gotest_map_array_slice/</guid>
      <description>#就是随便试试 听说goalng的map和slice的遍历性能差的不是一点半点，于是没事写个benchmark来玩玩 代码
package testings import( &amp;quot;testing&amp;quot; &amp;quot;strconv&amp;quot; ) var length = 1000 var maps map[string]string var slices []string var arrays [1000]string func init(){ maps = make(map[string]string,length) slices = make([]string,length) for i:=0;i&amp;lt;length;i++{ maps[strconv.Itoa(i)] = &amp;quot;abc&amp;quot; slices[i] = &amp;quot;abc&amp;quot; arrays[i] = &amp;quot;abc&amp;quot; } } func BenchmarkIterateMap(b *testing.B){ for i:=0;i&amp;lt;b.N;i++{ for _,_ = range maps{ } } } func BenchmarkIterateSlices(b *testing.B){ for i:=0;i&amp;lt;b.N;i++{ for _,_ = range slices{ } } } func BenchmarkIterateArrays(b *testing.</description>
    </item>
    
  </channel>
</rss>