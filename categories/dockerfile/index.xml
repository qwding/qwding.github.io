<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dockerfile on QWDing blog</title>
    <link>http://blog.qwding.com/categories/dockerfile/</link>
    <description>Recent content in Dockerfile on QWDing blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Oct 2016 10:37:02 +0800</lastBuildDate>
    <atom:link href="http://blog.qwding.com/categories/dockerfile/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>mongo 备份</title>
      <link>http://blog.qwding.com/post/mongo_backup/</link>
      <pubDate>Thu, 20 Oct 2016 10:37:02 +0800</pubDate>
      
      <guid>http://blog.qwding.com/post/mongo_backup/</guid>
      <description>

&lt;h1 id=&#34;mongo-备份:dff5b3233884f61ae2c2815811350b4d&#34;&gt;mongo 备份&lt;/h1&gt;

&lt;p&gt;秉承方便简单，易搭建原则，还是用docker来实现,&lt;a href=&#34;https://hub.docker.com/r/carlding/mongobackup/&#34;&gt;镜像地址（https://hub.docker.com/r/carlding/mongobackup/）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;docker hub找到一个镜像，istepanov/mongodump可以实现本地monogo的备份，查阅其内部脚本，并没有开放传入远程数据库的接口，于是在此基础上改进&lt;/p&gt;

&lt;p&gt;Dockerfile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM istepanov/mongodump

​MAINTAINER qwding 
ADD backup.sh backup.sh
ADD start.sh start.sh

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;backup.sh&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
set -e
echo &amp;quot;Job started: $(date)&amp;quot;
DATE=$(date +%Y%m%d_%H%M%S)
FILE=&amp;quot;/backup/backup-$DATE.tar.gz&amp;quot;
echo &amp;quot;mongodump -h $MONGO_PORT_27017_TCP_ADDR -p $MONGO_PORT_27017_TCP_PORT -u $MONGO_USER -p $MONGO_PASSWORD -d $MONGO_DB&amp;quot;
mongodump -h $MONGO_PORT_27017_TCP_ADDR -u $MONGO_USER -p $MONGO_PASSWORD -d $MONGO_DB
tar -zcvf $FILE dump/
rm -rf dump/
echo &amp;quot;Job finished: $(date)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;start.sh&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
set -e
CRON_SCHEDULE=${CRON_SCHEDULE:-0 1 * * *}
if [[ &amp;quot;$1&amp;quot; == &#39;no-cron&#39; ]]; then
    exec /backup.sh
else
    LOGFIFO=&#39;/var/log/cron.fifo&#39;
    if [[ ! -e &amp;quot;$LOGFIFO&amp;quot; ]]; then
        mkfifo &amp;quot;$LOGFIFO&amp;quot;
    fi
    CRON_ENV=&amp;quot;MONGO_PORT_27017_TCP_ADDR=&#39;$MONGO_PORT_27017_TCP_ADDR&#39;&amp;quot;
    CRON_ENV=&amp;quot;$CRON_ENV\nMONGO_USER=&#39;$MONGO_USER&#39;&amp;quot;
    CRON_ENV=&amp;quot;$CRON_ENV\nMONGO_PASSWORD=&#39;$MONGO_PASSWORD&#39;&amp;quot;
    CRON_ENV=&amp;quot;$CRON_ENV\nMONGO_DB=&#39;$MONGO_DB&#39;&amp;quot;
    echo -e &amp;quot;$CRON_ENV\n$CRON_SCHEDULE /backup.sh &amp;gt; $LOGFIFO 2&amp;gt;&amp;amp;1&amp;quot; | crontab -
    crontab -l
    cron
    tail -f &amp;quot;$LOGFIFO&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;构建：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t carlding/mongobackup . 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -v /root/mongo:/backup -e &#39;CRON_SCHEDULE=0 0 * * *&#39; -e MONGO_PORT_27017_TCP_ADDR=remote.addr:27017 -e MONGO_USER=carlding -e MONGO_PASSWORD=carlding -e MONGO_DB=mongo  carlding/mongobackup 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如上为每天零点执行一次mongo备份，并且将备份文件以时间为名字保存在了 /root/mongo目录下&lt;/p&gt;

&lt;p&gt;立即备份：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -v /root/mongo:/backup  -e MONGO_PORT_27017_TCP_ADDR=remote.addr:27017 -e MONGO_USER=carlding -e MONGO_PASSWORD=carlding -e MONGO_DB=mongo  carlding/mongobackup 

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>