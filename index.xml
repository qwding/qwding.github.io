<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>qwding的blog</title>
    <link>http://qwding.github.io/</link>
    <description>Recent content on qwding的blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 20 Apr 2016 11:48:19 +0800</lastBuildDate>
    <atom:link href="http://qwding.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>portus的docker容器搭建</title>
      <link>http://qwding.github.io/post/portus/</link>
      <pubDate>Wed, 20 Apr 2016 11:48:19 +0800</pubDate>
      
      <guid>http://qwding.github.io/post/portus/</guid>
      <description>

&lt;h3 id=&#34;一般形式:95f2626a8b71aea78c26d5a625e37de7&#34;&gt;一般形式&lt;/h3&gt;

&lt;p&gt;在官方文档，或者百度谷歌，搜到的portus一般都是compose形式搭建，这样好处是操作无脑&lt;/p&gt;

&lt;p&gt;但是一般情况下我们肯定是自己要更灵活一些的，肯定用docker容器形式更舒服一点。可是去dockerhub一搜，各种版本的镜像，查看dockerfile很多人都自己加了一些内容，对于不会ruby的人来说，并不知道那些操作都说干啥的。&lt;/p&gt;

&lt;h3 id=&#34;自己研究研究:95f2626a8b71aea78c26d5a625e37de7&#34;&gt;自己研究研究&lt;/h3&gt;

&lt;p&gt;github master分支上有dockerfile，如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM library/rails:4.2.2
MAINTAINER Flavio Castelli &amp;lt;fcastelli@suse.com&amp;gt;

ENV COMPOSE=1
EXPOSE 3000

WORKDIR /portus
COPY Gemfile* ./
RUN bundle install --retry=3

# Install phantomjs, this is required for testing and development purposes
# There are no official deb packages for it, hence we built it inside of the
# open build service.
RUN echo &amp;quot;deb http://download.opensuse.org/repositories/home:/flavio_castelli:/phantomjs/Debian_8.0/ ./&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list
RUN wget http://download.opensuse.org/repositories/home:/flavio_castelli:/phantomjs/Debian_8.0/Release.key &amp;amp;&amp;amp; \
  apt-key add Release.key &amp;amp;&amp;amp; \
  rm Release.key
RUN apt-get update &amp;amp;&amp;amp; \
    apt-get install -y --no-install-recommends phantomjs &amp;amp;&amp;amp; \
    rm -rf /var/lib/apt/lists/*

ADD . .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;于是直接用那个dockerfile直接build一个镜像。参考别人给出的一些docker run参数启动，并成功了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -e RAILS_ENV=production \
	-e RACK_ENV=production \
	-e PORTUS_SECRET_KEY_BASE=secret-goes-here \
	-e PORTUS_KEY_PATH=/certs/server-key.pem \
	-e PORTUS_PASSWORD=portuspw \
	-e PORTUS_CHECK_SSL_USAGE_ENABLED=false \
	-e PORTUS_MACHINE_FQDN_VALUE=192.168.56.101 \
	-e PORTUS_PRODUCTION_HOST=192.168.56.101 \
	-e PORTUS_PRODUCTION_USERNAME=portus \
	-e PORTUS_PRODUCTION_PASSWORD=portus \
	-e PORTUS_PRODUCTION_DATABASE=portus \
	-v /sslkeys:/certs \
	-v /root/terminal/Portus/:/portus \
	--restart=always \
	-p 5001:3000 portus:v1 puma -b tcp://0.0.0.0:3000 -w 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解释一下这些参数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PORTUS_SECRET_KEY_BASE 是rails 4.0以后出的一个web安全参数，一般要rake secret生成一个很长很长的随机串，发现随意写个串也无妨。&lt;/li&gt;
&lt;li&gt;PORTUS_KEY_PATH 猜测是对应registry给出那个crt的。&lt;/li&gt;
&lt;li&gt;PORTUS_PASSWORD 这个参数有意思。在你创建好portus后，需要创建一个用户叫 portus。密码就是这个密码。这个用户的目的是为了同步镜像用的。（之后说）&lt;/li&gt;
&lt;li&gt;PORTUS_CHECK_SSL_USAGE_ENABLED 因为我没有官方签发证书，所以用http，如果https，在registry的notifications时候会发不过去。&lt;/li&gt;
&lt;li&gt;PORTUS_MACHINE_FQDN_VALUE 就是你的portus要配置的域名。&lt;/li&gt;
&lt;li&gt;PORTUS_PRODUCTION_HOST，PORTUS_PRODUCTION_USERNAME，PORTUS_PRODUCTION_PASSWORD，PORTUS_PRODUCTION_DATABASE这几个就是数据库的地址，帐号，密码，数据库&lt;/li&gt;
&lt;li&gt;puma -b tcp://0.0.0.0:3000 -w 3 是执行的CMD，试了一下，这个镜像默认是什么都不执行的，所以启动可以添加这个命令，如果不想每次加可以在dockerfile里加上CMD.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;简化一下:95f2626a8b71aea78c26d5a625e37de7&#34;&gt;简化一下&lt;/h3&gt;

&lt;p&gt;显然，如上启动方式跟了一大堆参数是很烦的，也不是你想的。当然那就把它们放到配置文件里。&lt;/p&gt;

&lt;p&gt;主要有三个配置文件都放在了 Portus/config 文件夹下。分别为 config.yml, database.yml, secrets.yml&lt;/p&gt;

&lt;p&gt;将几个env变量都可以配置到文件的production里。&lt;/p&gt;

&lt;p&gt;值得注意的是，PORTUS_MACHINE_FQDN_VALUE这个变量在2.0.3版本里是放在了secrets.yml 里，但是如果你用的是portus的master分支，最新的代码是放在config.yml里的。一坑。&lt;/p&gt;

&lt;p&gt;所以启动方式可以改成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d \
	-e RAILS_ENV=production \
	-e RACK_ENV=production \
	-v /sslkeys:/certs \
	-v /root/terminal/Portus/:/portus \
	-p 5001:3000 \
	--restart=always \
	portus:v1 puma -b tcp://0.0.0.0:3000 -w 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不同版本有的参数配置不太一样，参数调整好以后就可以出现登录页面了。就可以开始操作了。&lt;/p&gt;

&lt;h3 id=&#34;镜像同步:95f2626a8b71aea78c26d5a625e37de7&#34;&gt;镜像同步&lt;/h3&gt;

&lt;p&gt;两种方法： 一段时间同步一次。每次push操作更新一次。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一段时间同步一次&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在我们登录以后，点击admin选项，会出现红色提示，user portus not exist。这时候你可以先创建portus用户，密码为secrets.yml里填写的密码。这个用户的作用就是同步时候用这个用户当做默认用户同步。&lt;/p&gt;

&lt;p&gt;我们在容器里路径为 /Portus 运行 &lt;code&gt;RAILS_ENV=production CATALOG_CRON=&amp;quot;60.seconds&amp;quot; bundle exec crono&lt;/code&gt; 他就会每隔60秒，用用户portus请求一次registry的 /v2/_catalog这个api查阅所有镜像。我们查看portus 容器日志会收到这个用户发来的请求。&lt;/p&gt;

&lt;p&gt;如果你发现同步失败，请检查是否给了portus admin权限，只有admin权限portus才可以访问所有镜像。&lt;/p&gt;

&lt;p&gt;如果想让这个作为单独容器来同步，可以将命令写成个脚本放到portus镜像里 /crono.sh。然后启动容器时候把命令改成 ./crono.sh就行。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;每次push请求一次&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;就是registry 里配置了 notifications，每次push会来向notifications配置的地址发请求。portus server收到请求后来更改数据库。&lt;/p&gt;

&lt;h3 id=&#34;问题:95f2626a8b71aea78c26d5a625e37de7&#34;&gt;问题&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;本地配置好以后，想试试域名访问有没有问题，结果改成域名以后一直401。&lt;/p&gt;

&lt;p&gt;后来突然想到，在登录第一次就配置了regitry server信息。应该是这个server名字改变了，所以拒绝了访问。&lt;/p&gt;

&lt;p&gt;修复方法： 直接到数据库的registry表将地址改成域名就行。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2.0.3版本可以登录，但是还是401. 应该是rails的不同版本的bundle不一样吧，没找解决办法。还是直接改回了master版本。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;push镜像的时候报错：
```
Error parsing HTTP response: invalid character &amp;lsquo;&amp;lt;&amp;rsquo; looking for beginning of value: &amp;ldquo;&lt;html&gt;\r\n&lt;head&gt;&lt;title&gt;413 Request Entity Too Large&lt;/title&gt;&lt;/head&gt;\r\n&lt;body bgcolor=\&#34;white\&#34;&gt;\r\n&lt;center&gt;&lt;h1&gt;413 Request Entity Too Large&lt;/h1&gt;&lt;/center&gt;\r\n&lt;hr&gt;&lt;center&gt;nginx/1.9.14&lt;/center&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n&amp;rdquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;```
这个问题是因为我们使用了http，并配置了nginx，但是默认只有https才允许有basic auth，所以认证失败了。换成https就行。
issue地址：&lt;a href=&#34;https://github.com/docker/docker-registry/issues/298#issuecomment-39845868&#34;&gt;https://github.com/docker/docker-registry/issues/298#issuecomment-39845868&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>温暖的木屋</title>
      <link>http://qwding.github.io/relax/warm_house/</link>
      <pubDate>Thu, 14 Apr 2016 18:18:02 +0800</pubDate>
      
      <guid>http://qwding.github.io/relax/warm_house/</guid>
      <description>&lt;p&gt;在v2ex上发现了一个小游戏，据说专门写代码时候在后台挂着的，于是也玩了一下。根本停不下来。&lt;/p&gt;

&lt;p&gt;链接：&lt;a href=&#34;http://g.miaowu.asia/index.php&#34;&gt;http://g.miaowu.asia/index.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;直接在线自动存档了。&lt;/p&gt;

&lt;p&gt;讲的大概就是从一个小黑屋发展成大村庄的故事，最后走向了外太空~~~&lt;/p&gt;

&lt;p&gt;整个游戏概述：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;就是一直挂机，收集资源，有了资源可以发展，发展到一定程度，出现新资源，可以提升自己的战斗力。&lt;/li&gt;
&lt;li&gt;之后买得起罗盘就可以开始探索，探索时候要注意携带的水量和腊肉量，一旦任意耗光，就死掉了，回家继续发展。&lt;/li&gt;
&lt;li&gt;探索途中会遇到野怪，控制好血量不要死掉就行，装备的话武器一样带一个就行。剩下都是腊肉都无所谓了。探索洞穴需要火把，带3个足够了。&lt;/li&gt;
&lt;li&gt;一定控制好资源够回家的水和肉。&lt;/li&gt;
&lt;li&gt;探索到一定程度就可以上天了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽说是挂机游戏，但是探索时候真心还是不挂机&amp;hellip;&lt;/p&gt;

&lt;p&gt;而且这是好几年前的游戏了，有开源代码。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;祝玩的愉快~&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hugo vs hexo</title>
      <link>http://qwding.github.io/post/hugo_vs_hexo/</link>
      <pubDate>Fri, 08 Apr 2016 18:51:19 +0800</pubDate>
      
      <guid>http://qwding.github.io/post/hugo_vs_hexo/</guid>
      <description>

&lt;h3 id=&#34;hugo-和-hexo-对比:f5f80bcd59ef9d4f36dd6010f161a624&#34;&gt;hugo 和 hexo 对比&lt;/h3&gt;

&lt;p&gt;主要是查阅了一下很多人经验，并汇总了一下对比结果&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                     hexo                           hugo
速度                  快                           特别快
主题           几大主题基础上延伸,总量更多     很多,良好主题生态圈
安装及更新       更新容易有坑，因为依赖包       一个binary,安装更新快
评论系统           支持disqus等                   支持disqus等
应用方面          博客适应性更强	             非博客适应性更强
文档              有中文文档                    文档超详细，中文不全
功能            分类,tag,多语言,i18n       分类,tag,series,wight,多语言

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为本身更喜欢golang，所以选择了hugo&lt;/p&gt;

&lt;h3 id=&#34;分享一下查阅的资料:f5f80bcd59ef9d4f36dd6010f161a624&#34;&gt;分享一下查阅的资料&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://beebom.com/2015/04/best-static-site-generators&#34;&gt;十种静态页面生成工具&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://hexo.io/&#34;&gt;hexo 文档&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://hexo.io/zh-cn/docs/&#34;&gt;hexo 中文文档&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.jianshu.com/p/465830080ea9&#34;&gt;hexo 一篇比较好的使用文章&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.gohugo.io/overview/quickstart/&#34;&gt;hugo 文档&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.gohugo.org/doc&#34;&gt;hugo 中文文档&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;hugo 主题&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;gitlab-pages:f5f80bcd59ef9d4f36dd6010f161a624&#34;&gt;gitlab pages&lt;/h3&gt;

&lt;p&gt;gitlab 8.3以后也出了github pages的功能，但只限gitlab-ee版本，需要付费&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.gitlab.com/omnibus/docker/&#34;&gt;gitlab-ee docker安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://doc.gitlab.com/ee/pages/README.html&#34;&gt;gitlab pages使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>矫情</title>
      <link>http://qwding.github.io/persional/main/</link>
      <pubDate>Fri, 08 Apr 2016 12:06:31 +0800</pubDate>
      
      <guid>http://qwding.github.io/persional/main/</guid>
      <description>

&lt;h3 id=&#34;贱人就是矫情:379caad01b6ea305187be199bcac1370&#34;&gt;贱人就是矫情&lt;/h3&gt;

&lt;p&gt;没事矫情一下，在这里写一些与技术无关的事情&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一个开始</title>
      <link>http://qwding.github.io/post/main/</link>
      <pubDate>Fri, 08 Apr 2016 11:57:57 +0800</pubDate>
      
      <guid>http://qwding.github.io/post/main/</guid>
      <description>

&lt;h3 id=&#34;写点博客总是好的:379caad01b6ea305187be199bcac1370&#34;&gt;写点博客总是好的&lt;/h3&gt;

&lt;p&gt;长点心，写点博客，少打游戏。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://qwding.github.io/about/</link>
      <pubDate>Fri, 01 Apr 2016 18:18:07 +0800</pubDate>
      
      <guid>http://qwding.github.io/about/</guid>
      <description>

&lt;h3 id=&#34;过山车式的履历:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;过山车式的履历&lt;/h3&gt;

&lt;p&gt;一开始在高大上的double e做测试，半年后实在忍受不了傻逼式的点点点，担心式的写英文邮件和各种测试用例的文字游戏。遂放弃了，更可以说是逃避了。&lt;/p&gt;

&lt;p&gt;转而做golang开发，语法简洁，开发迅速，性能强大等等让我很喜欢他。并很感谢我上个公司给了我很好的机会和平台，一年内得到很多锻炼。&lt;/p&gt;

&lt;p&gt;但是懒癌不能忍受周末加班还是让我跳了槽，来到了现公司。 却发现有种被忽悠来的感觉。&lt;/p&gt;

&lt;p&gt;与其来说是来做后台开发，不如说是来做ops的&amp;hellip;&lt;/p&gt;

&lt;p&gt;好吧！跨度好大。鉴于公司地理和上班制度以及拥有的并发量还是忍了。&lt;/p&gt;

&lt;h3 id=&#34;懒癌晚期:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;懒癌晚期&lt;/h3&gt;

&lt;p&gt;都说程序员呆板，技术宅，爱加班。我发现我一样不占。&lt;/p&gt;

&lt;p&gt;我不仅不爱加班，更不是技术宅。&lt;/p&gt;

&lt;p&gt;一有时间，先想到的是玩玩玩。并不会在家写代码研究东西&amp;hellip;&lt;/p&gt;

&lt;p&gt;主要还是玩性太大吧。&lt;/p&gt;

&lt;h3 id=&#34;id:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;ID&lt;/h3&gt;

&lt;p&gt;我在网易魔兽官方对战平台打dota的id叫 牛逼ID 和 卡拉赞毕业&lt;/p&gt;

&lt;p&gt;很好记，如果有有人看到打个招呼，玩的开心，被人打招呼玩的还是比较亲的~~~&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>