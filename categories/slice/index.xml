<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Slice on QWDing blog</title>
    <link>http://blog.qwding.com/categories/slice/</link>
    <description>Recent content in Slice on QWDing blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Oct 2016 19:19:58 +0800</lastBuildDate>
    <atom:link href="http://blog.qwding.com/categories/slice/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How golang slice Semi - pointer.</title>
      <link>http://blog.qwding.com/post/slice_args/</link>
      <pubDate>Sun, 09 Oct 2016 19:19:58 +0800</pubDate>
      
      <guid>http://blog.qwding.com/post/slice_args/</guid>
      <description>

&lt;h3 id=&#34;起因:ea699c56ae54e9a4b6e2bc03dae237ca&#34;&gt;起因&lt;/h3&gt;

&lt;p&gt;刷leetcode的77题时候，使用了递归方法，并且使用数组时候如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;result := make([][]int, 0, length+1)
recursive([]int{}, 1, n, k, result)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一次使用了cap声明slice，这样的好处是append时候在length后添加数据，并且保证长度够，append时候不会重新申请地址&lt;/p&gt;

&lt;p&gt;但是跑的时候发现，recursive()后，在返回到此段代码，居然什么都没有！result值没变。&lt;/p&gt;

&lt;h1 id=&#34;什么-slice不是传说的指针传递么:ea699c56ae54e9a4b6e2bc03dae237ca&#34;&gt;什么？ slice不是传说的指针传递么？&lt;/h1&gt;

&lt;h1 id=&#34;先看下官方数组结构样子:ea699c56ae54e9a4b6e2bc03dae237ca&#34;&gt;先看下官方数组结构样子&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.qwding.com/img/slice.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当然，一直知道数组是半指针，就是将数组的地址的值传进去。在函数里是改变不了指针的值，但是可以操作指针指向的数据，详细的google有很多&lt;/p&gt;

&lt;p&gt;我想象的是这样：函数收到的是数组的头地址(就是图最上面的指针）,length和cap等数据，这样可以完全接管数组的操作了&lt;/p&gt;

&lt;p&gt;但是上述起因里出现的问题却不是这样，到底是什么原因呢？于是写了测试代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
	result := make([]int, 0, 10)
	addr := &amp;amp;result
	fmt.Println(&amp;quot;result:&amp;quot;, result, &amp;quot;addr:&amp;quot;, unsafe.Pointer(addr))

	for i := 0; i &amp;lt; 10; i++ {
		functions(result)
		result = append(result, i)
		//appendData(result,i)
	}
	fmt.Println(&amp;quot;result:&amp;quot;, result, &amp;quot;addr:&amp;quot;, unsafe.Pointer(addr))

}

func functions(arr []int) {
	addr := &amp;amp;arr
	if len(arr) &amp;gt; 0 {
		fmt.Println(&amp;quot;arr:&amp;quot;, arr, &amp;quot;addr:&amp;quot;, unsafe.Pointer(addr), &amp;quot;arr 0 addr:&amp;quot;, &amp;amp;arr[0])
	} else {
		fmt.Println(&amp;quot;arr:&amp;quot;, arr, &amp;quot;addr:&amp;quot;, unsafe.Pointer(addr))
	}
}

func appendData(arr []int,data int){
	arr = append(arr,data)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;result: [] addr: 0xc420012200
arr: [] addr: 0xc420012260
arr: [0] addr: 0xc4200122a0 arr 0 addr: 0xc4200140f0
arr: [0 1] addr: 0xc4200122e0 arr 0 addr: 0xc4200140f0
arr: [0 1 2] addr: 0xc420012320 arr 0 addr: 0xc4200140f0
arr: [0 1 2 3] addr: 0xc420012360 arr 0 addr: 0xc4200140f0
arr: [0 1 2 3 4] addr: 0xc4200123a0 arr 0 addr: 0xc4200140f0
arr: [0 1 2 3 4 5] addr: 0xc4200123e0 arr 0 addr: 0xc4200140f0
arr: [0 1 2 3 4 5 6] addr: 0xc420012420 arr 0 addr: 0xc4200140f0
arr: [0 1 2 3 4 5 6 7] addr: 0xc420012460 arr 0 addr: 0xc4200140f0
arr: [0 1 2 3 4 5 6 7 8] addr: 0xc4200124a0 arr 0 addr: 0xc4200140f0
result: [0 1 2 3 4 5 6 7 8 9] addr: 0xc420012200
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;居然发现-unsafe-pointer-addr-的值是一直变的-但是-arr-0-是不变的:ea699c56ae54e9a4b6e2bc03dae237ca&#34;&gt;居然发现 unsafe.Pointer(addr)的值是一直变的！但是&amp;amp;arr[0]是不变的！&lt;/h1&gt;

&lt;p&gt;我擦，看来完全想错了，应该是函数里重新创建了一个数组(unsafe.Pointer(addr)一直变说明)，但是把源数组的数据地址拿过来,这个新创建的数组来指向他(&amp;amp;arr[0]不变说明)&lt;/p&gt;

&lt;h1 id=&#34;又测试在function里添加和删除数据-即代码中注释掉的地方去掉-发现返回到main里时是不生效的-所以说明最初猜想是错的:ea699c56ae54e9a4b6e2bc03dae237ca&#34;&gt;又测试在function里添加和删除数据，即代码中注释掉的地方去掉，发现返回到main里时是不生效的，所以说明最初猜想是错的。&lt;/h1&gt;

&lt;h3 id=&#34;修改:ea699c56ae54e9a4b6e2bc03dae237ca&#34;&gt;修改&lt;/h3&gt;

&lt;p&gt;有意思的是当我们修改原有的数据时候，是可以成功的，这就是因为数组元素指向的是原数组的地址，所以修改是生效的&lt;/p&gt;

&lt;h3 id=&#34;妄下结论:ea699c56ae54e9a4b6e2bc03dae237ca&#34;&gt;妄下结论&lt;/h3&gt;

&lt;p&gt;数组在函数传递过程中，在函数里可以更改数组的值，但是不能增和删&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>go map,slice,array 遍历性能测试 </title>
      <link>http://blog.qwding.com/post/gotest_map_array_slice/</link>
      <pubDate>Mon, 27 Jun 2016 14:28:44 +0800</pubDate>
      
      <guid>http://blog.qwding.com/post/gotest_map_array_slice/</guid>
      <description>

&lt;h1 id=&#34;就是随便试试:b5fc0eddaa47014462e79df04e2285e5&#34;&gt;#就是随便试试&lt;/h1&gt;

&lt;p&gt;听说goalng的map和slice的遍历性能差的不是一点半点，于是没事写个benchmark来玩玩
代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package testings

import(
	&amp;quot;testing&amp;quot;
	&amp;quot;strconv&amp;quot;
)

var length = 1000
var maps map[string]string
var slices []string
var arrays [1000]string

func init(){
	maps = make(map[string]string,length)
	slices = make([]string,length)
	for i:=0;i&amp;lt;length;i++{
		maps[strconv.Itoa(i)] = &amp;quot;abc&amp;quot;
		slices[i] = &amp;quot;abc&amp;quot;
		arrays[i] = &amp;quot;abc&amp;quot;
	}

}


func BenchmarkIterateMap(b *testing.B){
	for i:=0;i&amp;lt;b.N;i++{
		for _,_ = range maps{
		}
	}
}

func BenchmarkIterateSlices(b *testing.B){
	for i:=0;i&amp;lt;b.N;i++{
		for _,_ = range slices{
		}
	}
}

func BenchmarkIterateArrays(b *testing.B){
	for i:=0;i&amp;lt;b.N;i++{
		for _,_ = range arrays{
		}
	}
}

func BenchmarkIterateMapF(b *testing.B){
	for i:=0;i&amp;lt;b.N;i++{
		for _,k := range maps{
			_ = k
		}
	}
}

func BenchmarkIterateSlicesF(b *testing.B){
	for i:=0;i&amp;lt;b.N;i++{
		for _,k := range slices{
			_ = k
		}
	}
}

func BenchmarkIterateArraysF(b *testing.B){
	for i:=0;i&amp;lt;b.N;i++{
		for _,k := range arrays{
			_ = k
		}
	}
}

func BenchmarkIterateSlicesFor(b *testing.B){
	for i:=0;i&amp;lt;b.N;i++{
		for j:=0;j&amp;lt;length;j++{
			_ = slices[j]
		}
	}
}

func BenchmarkIterateArraysFor(b *testing.B){
	for i:=0;i&amp;lt;b.N;i++{
		for j:=0;j&amp;lt;length;j++{
			_= arrays[j]
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;测试结果:b5fc0eddaa47014462e79df04e2285e5&#34;&gt;#测试结果&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;➜  testings git:(master) ✗ go test -bench=. iterate_map_vs_slice_vs_array_test.go
testing: warning: no tests to run
PASS
BenchmarkIterateMap-4      	  100000	     20544 ns/op
BenchmarkIterateSlices-4   	 5000000	       368 ns/op
BenchmarkIterateArrays-4   	 5000000	       371 ns/op
BenchmarkIterateMapF-4     	  100000	     21685 ns/op
BenchmarkIterateSlicesF-4  	 2000000	       812 ns/op
BenchmarkIterateArraysF-4  	 1000000	      1036 ns/op
BenchmarkIterateSlicesFor-4	 1000000	      1199 ns/op
BenchmarkIterateArraysFor-4	 1000000	      1024 ns/op
ok  	command-line-arguments	14.858s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;看数据:b5fc0eddaa47014462e79df04e2285e5&#34;&gt;#看数据&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;先看前面三个方法，只是遍历，没有应用数据，大小都是1000，map 居然是slice和array的57倍之多。&lt;/li&gt;
&lt;li&gt;接下来三个方法是应用到了数据，map性能损耗基本没有增多多少，但是slice和array却增多一倍多（还不了解为什么）&lt;/li&gt;
&lt;li&gt;后面两个表明 array的按index取和range取性能不变，但是slice是有差距的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;数据不是固定的:b5fc0eddaa47014462e79df04e2285e5&#34;&gt;#数据不是固定的&lt;/h3&gt;

&lt;p&gt;将slice和map的大小分布调成10，100，1000，10000，得出的性能比，map/slice是不固定的，也没有发现什么规律(测试不够充分)，但是一般都在将近30倍以上。但是可以得出遍历性能确实差很多。&lt;/p&gt;

&lt;h3 id=&#34;slice-不同情况性能差距也比较大:b5fc0eddaa47014462e79df04e2285e5&#34;&gt;#slice 不同情况性能差距也比较大&lt;/h3&gt;

&lt;h3 id=&#34;遗留问题:b5fc0eddaa47014462e79df04e2285e5&#34;&gt;#遗留问题&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;slice 为什么只遍历和取到数据还有一倍多的性能损耗&lt;/li&gt;
&lt;li&gt;slice 的index取数和range取数性能也有差距&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>